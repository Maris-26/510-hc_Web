{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\nexport const cocktailService = {\n  // Get random cocktail\n  getRandomCocktail: async () => {\n    try {\n      const response = await api.get('/cocktails/random');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching random cocktail:', error);\n      throw new Error('Failed to fetch random cocktail. Please try again later.');\n    }\n  },\n  // Search cocktails by name\n  searchCocktails: async name => {\n    try {\n      const response = await api.get(`/cocktails/search?name=${encodeURIComponent(name)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error searching cocktails:', error);\n      throw new Error('Failed to search cocktails. Please try again later.');\n    }\n  },\n  // Get cocktail by ID\n  getCocktailById: async id => {\n    try {\n      const response = await api.get(`/cocktails/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cocktail details:', error);\n      throw new Error('Failed to fetch cocktail details. Please try again later.');\n    }\n  },\n  // Get cocktails by ingredient\n  getCocktailsByIngredient: async ingredient => {\n    try {\n      const response = await api.get(`/cocktails/ingredient/${encodeURIComponent(ingredient)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cocktails by ingredient:', error);\n      throw new Error('Failed to fetch cocktails by ingredient. Please try again later.');\n    }\n  },\n  // Get cocktails by category\n  getCocktailsByCategory: async category => {\n    try {\n      const response = await api.get(`/cocktails/category/${encodeURIComponent(category)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cocktails by category:', error);\n      throw new Error('Failed to fetch cocktails by category. Please try again later.');\n    }\n  },\n  // Get all categories\n  getCategories: async () => {\n    try {\n      const response = await api.get('/cocktails/categories/list');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      throw new Error('Failed to fetch categories. Please try again later.');\n    }\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","headers","withCredentials","cocktailService","getRandomCocktail","response","get","data","error","console","Error","searchCocktails","name","encodeURIComponent","getCocktailById","id","getCocktailsByIngredient","ingredient","getCocktailsByCategory","category","getCategories"],"sources":["C:/Users/dbcsy/Documents/Github/510-hc_Web/client/src/services/cocktailService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true\r\n});\r\n\r\nexport const cocktailService = {\r\n  // Get random cocktail\r\n  getRandomCocktail: async () => {\r\n    try {\r\n      const response = await api.get('/cocktails/random');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching random cocktail:', error);\r\n      throw new Error('Failed to fetch random cocktail. Please try again later.');\r\n    }\r\n  },\r\n\r\n  // Search cocktails by name\r\n  searchCocktails: async (name) => {\r\n    try {\r\n      const response = await api.get(`/cocktails/search?name=${encodeURIComponent(name)}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error searching cocktails:', error);\r\n      throw new Error('Failed to search cocktails. Please try again later.');\r\n    }\r\n  },\r\n\r\n  // Get cocktail by ID\r\n  getCocktailById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/cocktails/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching cocktail details:', error);\r\n      throw new Error('Failed to fetch cocktail details. Please try again later.');\r\n    }\r\n  },\r\n\r\n  // Get cocktails by ingredient\r\n  getCocktailsByIngredient: async (ingredient) => {\r\n    try {\r\n      const response = await api.get(`/cocktails/ingredient/${encodeURIComponent(ingredient)}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching cocktails by ingredient:', error);\r\n      throw new Error('Failed to fetch cocktails by ingredient. Please try again later.');\r\n    }\r\n  },\r\n\r\n  // Get cocktails by category\r\n  getCocktailsByCategory: async (category) => {\r\n    try {\r\n      const response = await api.get(`/cocktails/category/${encodeURIComponent(category)}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching cocktails by category:', error);\r\n      throw new Error('Failed to fetch cocktails by category. Please try again later.');\r\n    }\r\n  },\r\n\r\n  // Get all categories\r\n  getCategories: async () => {\r\n    try {\r\n      const response = await api.get('/cocktails/categories/list');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n      throw new Error('Failed to fetch categories. Please try again later.');\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAG;EAC7B;EACAC,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,mBAAmB,CAAC;MACnD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAM,IAAIE,KAAK,CAAC,0DAA0D,CAAC;IAC7E;EACF,CAAC;EAED;EACAC,eAAe,EAAE,MAAOC,IAAI,IAAK;IAC/B,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,0BAA0BO,kBAAkB,CAACD,IAAI,CAAC,EAAE,CAAC;MACpF,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAM,IAAIE,KAAK,CAAC,qDAAqD,CAAC;IACxE;EACF,CAAC;EAED;EACAI,eAAe,EAAE,MAAOC,EAAE,IAAK;IAC7B,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,cAAcS,EAAE,EAAE,CAAC;MAClD,OAAOV,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAM,IAAIE,KAAK,CAAC,2DAA2D,CAAC;IAC9E;EACF,CAAC;EAED;EACAM,wBAAwB,EAAE,MAAOC,UAAU,IAAK;IAC9C,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,yBAAyBO,kBAAkB,CAACI,UAAU,CAAC,EAAE,CAAC;MACzF,OAAOZ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAM,IAAIE,KAAK,CAAC,kEAAkE,CAAC;IACrF;EACF,CAAC;EAED;EACAQ,sBAAsB,EAAE,MAAOC,QAAQ,IAAK;IAC1C,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,uBAAuBO,kBAAkB,CAACM,QAAQ,CAAC,EAAE,CAAC;MACrF,OAAOd,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,MAAM,IAAIE,KAAK,CAAC,gEAAgE,CAAC;IACnF;EACF,CAAC;EAED;EACAU,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMP,GAAG,CAACQ,GAAG,CAAC,4BAA4B,CAAC;MAC5D,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAM,IAAIE,KAAK,CAAC,qDAAqD,CAAC;IACxE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}