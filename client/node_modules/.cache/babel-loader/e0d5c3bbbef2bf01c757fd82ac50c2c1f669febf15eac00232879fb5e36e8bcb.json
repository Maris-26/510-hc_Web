{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default configuration\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add response interceptor for better error handling\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error.message);\n  if (error.response) {\n    // The request was made and the server responded with a status code\n    // that falls out of the range of 2xx\n    console.error('Error response:', error.response.data);\n    throw new Error(error.response.data.message || 'Failed to fetch data');\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.error('No response received:', error.request);\n    throw new Error('No response from server. Please check if the server is running.');\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.error('Request setup error:', error.message);\n    throw new Error('Failed to make request');\n  }\n});\nconst cocktailService = {\n  // Get random cocktail\n  getRandomCocktail: async () => {\n    try {\n      const response = await api.get('/cocktails/random');\n      return response.data;\n    } catch (error) {\n      console.error('Error in getRandomCocktail:', error);\n      throw error;\n    }\n  },\n  // Search cocktails by name\n  searchCocktails: async query => {\n    try {\n      const response = await api.get(`/cocktails/search?q=${query}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error in searchCocktails:', error);\n      throw error;\n    }\n  },\n  // Get cocktail by ID\n  getCocktailById: async id => {\n    try {\n      const response = await api.get(`/cocktails/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error in getCocktailById:', error);\n      throw error;\n    }\n  },\n  // Get cocktails by ingredient\n  getCocktailsByIngredient: async ingredient => {\n    try {\n      const response = await api.get(`/cocktails/ingredient/${ingredient}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error in getCocktailsByIngredient:', error);\n      throw error;\n    }\n  },\n  // Get cocktails by category\n  getCocktailsByCategory: async category => {\n    try {\n      const response = await api.get(`/cocktails/category/${category}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error in getCocktailsByCategory:', error);\n      throw error;\n    }\n  },\n  // Get all categories\n  getCategories: async () => {\n    try {\n      const response = await api.get('/cocktails/categories');\n      return response.data;\n    } catch (error) {\n      console.error('Error in getCategories:', error);\n      throw error;\n    }\n  }\n};\nexport default cocktailService;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","response","use","error","console","message","data","Error","request","cocktailService","getRandomCocktail","get","searchCocktails","query","getCocktailById","id","getCocktailsByIngredient","ingredient","getCocktailsByCategory","category","getCategories"],"sources":["C:/Users/dbcsy/Documents/Github/510-hc_Web/client/src/services/cocktailService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create an axios instance with default configuration\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n  timeout: 5000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add response interceptor for better error handling\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    console.error('API Error:', error.message);\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      console.error('Error response:', error.response.data);\r\n      throw new Error(error.response.data.message || 'Failed to fetch data');\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      console.error('No response received:', error.request);\r\n      throw new Error('No response from server. Please check if the server is running.');\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.error('Request setup error:', error.message);\r\n      throw new Error('Failed to make request');\r\n    }\r\n  }\r\n);\r\n\r\nconst cocktailService = {\r\n  // Get random cocktail\r\n  getRandomCocktail: async () => {\r\n    try {\r\n      const response = await api.get('/cocktails/random');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in getRandomCocktail:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Search cocktails by name\r\n  searchCocktails: async (query) => {\r\n    try {\r\n      const response = await api.get(`/cocktails/search?q=${query}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in searchCocktails:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get cocktail by ID\r\n  getCocktailById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/cocktails/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in getCocktailById:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get cocktails by ingredient\r\n  getCocktailsByIngredient: async (ingredient) => {\r\n    try {\r\n      const response = await api.get(`/cocktails/ingredient/${ingredient}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in getCocktailsByIngredient:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get cocktails by category\r\n  getCocktailsByCategory: async (category) => {\r\n    try {\r\n      const response = await api.get(`/cocktails/category/${category}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in getCocktailsByCategory:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all categories\r\n  getCategories: async () => {\r\n    try {\r\n      const response = await api.get('/cocktails/categories');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error in getCategories:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default cocktailService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}